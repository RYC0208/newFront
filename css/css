Css
-> 
Cascading:계단식
Style: 멋을 내다
Sheets: (종이)한 장

계단식으로 스타일을 정의하는 문서

HTML의 스타일을 꾸며주는 것은 CSS라고 보면됨

CSS흐름도
-> HTML+CSS => 문서 열기 => 코드 해석 => 페이지 출력

CSS는 독립적으로 존재는 할 수 있지만 사실상 HTML의 스타일을 
정의하는데 존재하기 때문에 독립적인 존재는 단순 텍스트일 뿐이며 큰 의미가 없음


CSS 기본 문법

선택자{
    속성며: 속성값;
}

선택자: 어떤 요소에 스타일을 적용 할지에 대한 정보
{중괄호}: 선택한 요소에 적용할 스타일을 정의하는 영역을
속석명: 어떤 스타일을 정의하고 싶은지에 대한 정보(색상,크기 등)
속성값: 어떻게 정의하고 싶은지에 대한 정보

HTML예 CSS를 더하려면

HTML 문서에 CSS 문서에 적용하고자 할 때

인라인 스타일: 태그에 직접 기술하기
스타일 태그: 스타일 시트를위한 태그를 추가하여 기술하기
문서 간의 연결: 스타일시트 문서를 따로 작성하여 HTML 문서와 연결하기




;인라인 스타일
->
태그에 style 속성응ㄹ 추가하여 요소에 직접적으로 스타일을 정의하는 방식.
따라서 선택자는 필요 없다
웹 콘텐츠와 스타일 시트를 분리하기 위해서는 사용하지 않는편이 좋다.
ex) <p style="color: blue;"></p>

;스타일 태그
->
HTML 문서에 <style></style>태그를 추가하여 그 안에 CSS 코드를 작성할 수 있음
ex)
<style>
p {
    color: red;
}
</style>

;문서간의 연결
->
확장자가 *.css인 스타일 시트 파일을 생성해 그 안에 CSS 코드를 작성하고,
HTML문서에 이를 연결해줄 수 있다 이때는 <link>태그를 사용한다
ex) <link href="./style.css" rel="stylesheet">(단일 태그)

*href : 연결하고자 하는 외부 소소의 url을 기술하는 속성
*rel : 현재 문서(HTML)와 외부 소스의 연관 관계를 기술하는 속성
<link>태그는 <head>태그 내부에 작성해야함</head>



****선택자*****
어떤 요소에 스타일을 적요할 것인지에 대한 정보

선택자{
    속성명: 속성값;
}

;선택자의 종류

* 기본 선택자
* 그룹 선택자
* 특성 선택자
* 결합 선택자
* 의사 클래스
* 의사 요소에

;기본 선택자 => 전체 선택자
모든 요소에 선택한다
*(애스터리스크)는 '문서 내의 모든 요소'를 의미하는 기호
*{
    color:blue;
    ; 문서내의 모든 요소의 컬러를 파란색으로 지정
}


;기본 선택자 => 태그 선택자
주어진 이름을 가진 요소를 선택(유형 선택자라고도 함)
주어진 이름을 가진 요소가 다수라면 해당 요소를 모두 선택함
p{
    color: blue;
    ;p태그의 컬러를 파란색으로
}

;기본 선택자 => 클래스 선택자
주어진 class 속성값을 가진 요소를 선택함
주어진 class 속성값을 가진 요소가 다수일 경우, 해당 요소를 모두 선택함
.text{
    color: blue;
    ;문서 내의 클래스가 text인 모든 요소에 컬러를 파란색으로(.을 붙이면 class를 의미)
}

;기본 선택자 => 아이디 선택자
주어진 id 속성값을 가진 요소를 선택함
id는 고유한 식별자 역할을 하는 전역 속성이다.
#topic
{
    color: blue;
    ;문서내의 id가 topic인 요소의 컬러를 파란색으로(#을 붙이면 id를 의미)
}


;그룹 선택자

다양한 유형의 요소에 한꺼번에 선택하고자 할 때 사용한다
쉼표(,)를 이용해 선택자를 그룹화한다

h1, p, div{
    color: blue;
    ;문서내의 모든 요소의 h1, p, div의 컬러를 파란색으로
}



////////////////////////////////////////////////
선택자가 겹치는 경우, 기본적으로 나중에 작성된 스타일이 적용되고
선택자가 다르지만 요소가 겹치는 경우, 선택자 우선 순위에 의해 적용될 스타일이 결정됨

;선택자 우선순위
아이디 선택자 > 클래스 선택자 > 태그 선택자



*****텍스트 관련 속성
->
font-family: 글꼴을 정의한다.
font-size: 글자 크기를 정의한다.
fext-align: 정렬 방식을 정의한다.
color: 글자 색상을 정의한다.

//font-fmaily
요소를 구성하는 텍스트의 글꼴을 정의하며 글꼴명을 속성값으로 지정한다
여러 개의 글꼴을 연달아 기입하여 우선 순위를 지정할 수 있다.
*{
    font-family: Times, monospace, serif;
    #Time를 우선 지정하되, 지원되지 않을 경우 monospace를 지정한다
}


//font-size
수치와 단위를 지정해 글자의 크기를 정의할 수 있다.
px: 모니터 상의 화소 하나 크기에 대응하는 절대적인 크기
rem: <html> 태그의 font-size에 대응하는 상대적인 크기
em: 부모태그(상위태그)의 font-size에 대응하는 상대적인 크기

ex)
span{font-size: 16px ;}
span{font-size: 2rem ;}
span{font-size: 1.5em ;}

//text-align
블록 내에서 텍스트의 정렬 방식을 정의한다. 미리 정의된 키워드 값을 지정한다.

left/right: 왼쪽 또는 오른쪽 정렬
center: 가운데 정렬
justify: 양끝 정렬(마지막 줄 제외)

ex)
p{ text-align: right;}
p{ text-align: center;}
p{ text-align: justify;}



//color
텍스트 색상을 정의, 다양한 방법으로 색상을 지정할 수 있음
키워드: 미리 정의된 색상별 키워드를 사용한다(ex/ red, blue)
RGB 색상 코드: # +여섯자리 16진수 값 형태로 지정한다
RGB 함수: Red, Green, Blue의 수준을 각각 정의해 지정한다

ex)
span{ color: red;}
span{ color: #FF0000;}
span{ color: rgb(100%, 0%, 0%);}
////모두 같은 색!!!!////
여기서 RGB란 -> 빛의 삼원색(Red,Green,blue)을 혼합하여 색을 정의하는 방식이고 모든 수치가 가장 높을 때 흰색이 됨

;*           R: 100%, G: 0%, B: 0%
span{ color: rgb(100%, 0%, 0%);}



;블록 레벨 요소 vs 인라인 요소

블록 레벨 요소 : div, p, h 등등
자기가 속한 영역의 너비를 모두 차지하여 블록을 형성함

인라인 요소: span, a 
자기에게 필요한 만큼의 공간만 차지한다

;display 속성
위 속성은 요소를 블록과 인라인 요소 중 어느 쪽으로 처리할지 정의함

display에는 미리 정의되어 있는 키워드를 속성값으로 지정함

inline: 인라인으로 처리
block: 블록 레벨로 처리
inline-block: 인라인으로 배치하되, 블록 레벨 요소의 속성을 추가할 수 있도록 처리
none: 표시하지 않음
등등

;border 속성

border 속성을 사용하면 요소가 차지하고 있는 영역에 테두리를 그릴 수 있다
border 속성에는 속성값으로 테두리의 두께, 모양 , 크기 등을 함께 지정할 수있는데, 이러한 속성을 '단축속성'이라 한다
ex)
span{ border: 2px solid green;}

//border 속성의 하위 속성

border-color : color 정의 방식과 동일
border-width : thin, medium, thick 등의 키워드 또는 px,em,rem등의 단위( 두께를 정의함 )
border-style : none(기본값), solid(직선), dotted(점선), dashed(긴 점선) 등 (테두리의 모양을 정의함)

;박스모델

브라우저가 요소를 렌더링할 때, 각각의 요소는 기본적으로 사각형 형태로 영역을 차지하게 된다
이 영역을 '박스'라고 표현하며 css는 박스의 크기, 위치, 속성(색,배경,테두리)등을 결정할 수 있음


;;박스모델 영역

하나의 박스는 다음 네 개의 영역으로 구성된다
/
콘텐츠 영역
안쪽 여백
경계선(테두리)
바깥쪽 여백
/

바깥쪽 여백
     => 경계선(테두리)
            => 안쪽 여백
                    => 콘텐츠 영역 (콘텐츠 높이와 콘텐츠 너비를 가짐)


박스 각 영역의 크기를 정의할 수 있는 속성은

콘텐츠 영역: width, height
안쪽 여백: padding
바깥쪽 여백: margin
테두리: border-width


;padiing과 margin

콘텐츠 주변에 여백을 정리하기 위해 사용하는 속성
콘텐츠의 테두리를 기준으로 테두리 안쪽을 padding 테두리 바깥쪽을 margin으로 정리해줌

여백은 상하좌우 네 개의 면에 존재하는 영역임
필요한 경우 작성자는 각 면에 개별적으로 두께를 정의할 수 있음
이를 위해 다음 두가지 방법을 사용

* 하위 속성 정의하기

/pdding,margin의 top,left,right,bottom 사용


* 여러 값을 한 번에 정의하기

/ 네 변의 여백에 대한 단축 속성
span{
    display: inline-block;
    margin: 10px 20px 30px 40px;
}

;position
position은 문서 상에 요소를 배치하는 방법을 정의함

position이 요소의 배치 방법을 결정하면,
top,bottom,right,left 가 최종 위치를 결정하는 방식


* position 속성값

static : 기본값 요소를 일반적인 문서 흐름에 따라 배치함
relative : 일반적인 문서 흐름에 따라 배치하되, 상하좌우 위치 값에 따라 오프셋을 적용한다
absolute : 일반적인 문서 흐름에서 제거하고, 가장 가까운 position 지정 요소에 대해 상대적으로 오프셋을 적용한다
fixed : 일반적인 문서 흐름에서 제거하고, 지정한 위치에 고정된다
sticky : 일반적인 문서 흐름에서 제거하고, 스크롤 동작이 존재하는 가장 가까운 요소에 대해 오프셋을 적용한다.

position: relative
요소를 일반적인 문서 흐름에 따라 배치하되, 상하좌우 위치 값에 따라 오프셋을 적용한다
'오프셋'이란 위치를 얼마간 이동시키는 것을 의미함


position: absolute

요소를 일반적인 문서 흐름에서 제거하고, 상위 요소 중 가장 가까운
position 지정 요소에 대해 상대적으로 오프셋을 적용한다.
position 지정 요소라, position 속성에 속성값이 정의되어 있는 요소
/* 
    absolute를 사용하면 문서의 흐름에서 제외 되기에 다른 요소와 겹칠 수 있음
    상위 요소중 position을 가진 요소가 없다면 window를 기준으로 오프셋을 잡게됨
*/

position: fixed

요소를 일반적인 문서 흐름에서 제거하고, 지정된 위치에 고정시킨다

position: sticky

요소를 일반적인 문서 흐름에 따라 배치하고, 
스크롤 되는 가장 가까운 상위 요소에 대해 오프셋을 적용한다
스크롤 이동으로 요소가 움직여도 스티키 요소는 고정된 상태를 유지함.